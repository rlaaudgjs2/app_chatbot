package com.example.chatbot;

import static androidx.constraintlayout.helper.widget.MotionEffect.TAG;

import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.text.SpannableString;
import android.text.Spanned;
import android.text.TextPaint;
import android.text.method.LinkMovementMethod;
import android.text.style.ClickableSpan;
import android.text.style.StyleSpan;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.core.content.ContextCompat;
import androidx.fragment.app.Fragment;
import androidx.fragment.app.FragmentTransaction;

import com.android.volley.Request;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.SignInButton;
import com.google.android.gms.common.api.ApiException;
import com.google.firebase.FirebaseApp;
import com.google.firebase.appcheck.FirebaseAppCheck;
import com.google.firebase.appcheck.debug.DebugAppCheckProviderFactory;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.Query;
import com.google.firebase.firestore.QuerySnapshot;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Map;

public class SignIn extends Fragment {

    private View view;
    private String id;
    private TextView signup_change;
    private GoogleSignInClient mGoogleSignInClient;

    private EditText userIdEditText;
    private static final int RC_SIGN_IN = 9001;
    private EditText userPasswordEditText;
    private FirebaseAuth mAuth;

    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        view = inflater.inflate(R.layout.fragment_sign_in, container, false);
        mAuth = FirebaseAuth.getInstance();

        // App Check ÎîîÎ≤ÑÍ∑∏ ÌÜ†ÌÅ∞ ÏÑ§Ï†ï
        FirebaseApp.initializeApp(requireContext());
        FirebaseAppCheck.getInstance().installAppCheckProviderFactory(
                DebugAppCheckProviderFactory.getInstance()
        );
        // üîπ Google Î°úÍ∑∏Ïù∏ ÏòµÏÖò ÏÑ§Ï†ï
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestIdToken(getString(R.string.default_web_client_id))  // FirebaseÏóêÏÑú ÏÉùÏÑ±Îêú Web Client ID ÌïÑÏöî
                .requestEmail()
                .build();

        mGoogleSignInClient = GoogleSignIn.getClient(requireContext(), gso);

        SignInButton googleButton = view.findViewById(R.id.buttonGoogle);
        googleButton.setSize(SignInButton.SIZE_STANDARD);
        googleButton.setOnClickListener(v -> signInWithGoogle());
   Button signCat = view.findViewById(R.id.cats_login);

        userIdEditText = view.findViewById(R.id.input_id);
        userPasswordEditText = view.findViewById(R.id.input_password);
        signup_change = view.findViewById(R.id.signup_change);
        String fullText = "ÌöåÏõêÏù¥ ÏïÑÎãàÏã†Í∞ÄÏöî? ÌöåÏõêÍ∞ÄÏûÖ";
        SpannableString spannableString = new SpannableString(fullText);
        ClickableSpan clickableSpan = new ClickableSpan() {
            @Override
            public void onClick(@NonNull View widget) {
                ChangeSignUp();
            }

            @Override
            public void updateDrawState(TextPaint ds) {
                super.updateDrawState(ds);
                ds.setUnderlineText(false); // Î∞ëÏ§Ñ Ï†úÍ±∞
                ds.setColor(ContextCompat.getColor(requireContext(), R.color.black)); // ÏÉâÏÉÅ ÏÑ§Ï†ï
            }
        };
        int startIndex = fullText.indexOf("ÌöåÏõêÍ∞ÄÏûÖ");
        int endIndex = startIndex + "ÌöåÏõêÍ∞ÄÏûÖ".length();
        spannableString.setSpan(clickableSpan, startIndex, endIndex, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        spannableString.setSpan(new StyleSpan(android.graphics.Typeface.BOLD), startIndex, endIndex, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        signup_change.setText(spannableString);
        signup_change.setMovementMethod(LinkMovementMethod.getInstance());

        signCat.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                signCat();
            }
        });

        return view;
    }

    private void signInWithGoogle() {
        Intent signInIntent = mGoogleSignInClient.getSignInIntent();
        startActivityForResult(signInIntent, RC_SIGN_IN);
    }
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == RC_SIGN_IN) {
            try {
                GoogleSignInAccount account = GoogleSignIn.getSignedInAccountFromIntent(data).getResult(ApiException.class);
                firebaseAuthWithGoogle(account.getIdToken());
            } catch (ApiException e) {
                Log.w(TAG, "Google sign-in failed", e);
                Toast.makeText(getContext(), "Google Î°úÍ∑∏Ïù∏ Ïã§Ìå®", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void firebaseAuthWithGoogle(String idToken) {
        AuthCredential credential = GoogleAuthProvider.getCredential(idToken, null);
        mAuth.signInWithCredential(credential)
                .addOnCompleteListener(requireActivity(), task -> {
                    if (task.isSuccessful()) {
                        FirebaseUser user = mAuth.getCurrentUser();
                        if (user != null) {
                            saveUserToFirestore(user);
                        }
                    } else {
                        Toast.makeText(getContext(), "Firebase Ïù∏Ï¶ù Ïã§Ìå®", Toast.LENGTH_SHORT).show();
                    }
                });
    }

    private void saveUserToFirestore(FirebaseUser user) {
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        Map<String, Object> userData = new HashMap<>();
        userData.put("uid", user.getUid());
        userData.put("email", user.getEmail());
        userData.put("name", user.getDisplayName());

        db.collection("users").document(user.getUid())
                .set(userData)
                .addOnSuccessListener(aVoid -> {
                    Toast.makeText(getContext(), "ÌôòÏòÅÌï©ÎãàÎã§, " + user.getDisplayName(), Toast.LENGTH_SHORT).show();
                    groupCheck();
                })
                .addOnFailureListener(e -> {
                    Toast.makeText(getContext(), "Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïò§Î•ò", Toast.LENGTH_SHORT).show();
                });
    }



    private void ChangeSignUp() {
        Fragment signUp = new SignUp();
        FragmentTransaction transaction = requireActivity().getSupportFragmentManager().beginTransaction();
        transaction.replace(R.id.container, signUp);

        transaction.addToBackStack(null);

        transaction.commit();

    }


    private void signCat() {
        String userID = userIdEditText.getText().toString();
        String userPassword = userPasswordEditText.getText().toString();
        FirebaseAuth mAuth = FirebaseAuth.getInstance();
        if (userID.isEmpty()) {
            Toast.makeText(getContext(), "ÏïÑÏù¥ÎîîÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî", +Toast.LENGTH_SHORT).show();
            userIdEditText.requestFocus();
        } else if (userPassword.isEmpty()) {
            Toast.makeText(getContext(), "ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî", +Toast.LENGTH_SHORT).show();
            userPasswordEditText.requestFocus();
        } else {
            mAuth.signInWithEmailAndPassword(userID + "@timproject.co.kr", userPassword)
                    .addOnCompleteListener(task -> {
                        if (task.isSuccessful()) {
                            // Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ
                            FirebaseUser user = mAuth.getCurrentUser();
                            String uid = user.getUid();
                            Toast.makeText(getContext(), "ÌôòÏòÅÌï©ÎãàÎã§", Toast.LENGTH_SHORT).show();
                            checkGPTKeyInFirebase(uid);
//
                            UidSingleton singleton = UidSingleton.getInstance();
                            singleton.setUid(uid);
                        } else {
                            // Î°úÍ∑∏Ïù∏ Ïã§Ìå®
                            Toast.makeText(getContext(), "Î°úÍ∑∏Ïù∏ Ïã§Ìå®: " + "Ï†ïÎ≥¥Î•º Îã§ÏãúÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî", Toast.LENGTH_SHORT).show();
                        }
                    });
        }


    }

    private void groupCheck() {
        FirebaseUser currentUser = FirebaseAuth.getInstance().getCurrentUser();
        if (currentUser == null) {
            Log.d(TAG, "Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§.");
            return;
        }

        FirebaseFirestore db = FirebaseFirestore.getInstance();
        db.collection("users").document(currentUser.getUid())
                .get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        DocumentSnapshot document = task.getResult();
                        if (document != null && document.exists()) {
                            if (document.contains("groups")) {
                                // Í∑∏Î£π Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ ChatFragmentÎ°ú Ïù¥Îèô
                                FragmentTransaction transaction = requireActivity()
                                        .getSupportFragmentManager()
                                        .beginTransaction();
                                transaction.replace(R.id.container, new ChatFragment());
                                transaction.commit();
                            } else {
                                // Í∑∏Î£π Ï†ïÎ≥¥Í∞Ä ÏóÜÏúºÎ©¥ Í∑∏Î£π ÏÉùÏÑ± FragmentÎ°ú Ïù¥Îèô
                                Toast.makeText(getContext(), "Í∑∏Î£πÏù¥ ÏóÜÏñ¥ Í∑∏Î£π ÏÉùÏÑ± ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.", Toast.LENGTH_SHORT).show();
                                Bundle bundle = new Bundle();
                                bundle.putString("uid", document.getId());
                                // ÌïÑÏöîÌïòÎã§Î©¥ Ï∂îÍ∞Ä Ï†ïÎ≥¥ÎèÑ Î≤àÎì§Ïóê Îã¥Í∏∞
                                Fragment groupCreate = new GroupCreate();
                                groupCreate.setArguments(bundle);
                                FragmentTransaction transaction = requireActivity()
                                        .getSupportFragmentManager()
                                        .beginTransaction();
                                transaction.replace(R.id.container, groupCreate);
                                transaction.addToBackStack(null);
                                transaction.commit();
                            }
                        } else {
                            Log.d(TAG, "Ìï¥Îãπ ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
                        }
                    } else {
                        Log.e(TAG, "ÏÇ¨Ïö©Ïûê Í∑∏Î£π Ï†ïÎ≥¥ ÌôïÏù∏ Ï§ë Ïò§Î•ò Î∞úÏÉù: " + task.getException());
                    }
                });
    }


    private void checkGPTKeyInFirebase(String uid) {
        FirebaseFirestore db = FirebaseFirestore.getInstance();
        db.collection("users").document(uid)
                .get()
                .addOnCompleteListener(task -> {
                    if (task.isSuccessful()) {
                        DocumentSnapshot document = task.getResult();
                        if (document.exists() && document.getBoolean("hasGPTKey") != null) {
                            boolean hasGPTKey = document.getBoolean("hasGPTKey");
                            if (hasGPTKey) {
                                // hasGPTKeyÍ∞Ä trueÏù¥Î©¥ Î∞îÎ°ú Îã§Ïùå Í≥ºÏ†ïÏúºÎ°ú Ïù¥Îèô
                                groupCheck();
                            } else {
                                showGPTKeyDialog(requireContext(), uid);
                            }
                        } else {
                            showGPTKeyDialog(requireContext(), uid);
                        }
                    } else {
                        Toast.makeText(getContext(), "ÌÇ§ ÌôïÏù∏ Ï§ë Ïò§Î•ò Î∞úÏÉù", Toast.LENGTH_SHORT).show();
                    }
                });
    }


    private void showGPTKeyDialog(Context context, String uid) {
        // Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÎπåÎçî ÏÉùÏÑ±
        AlertDialog.Builder builder = new AlertDialog.Builder(context);

        // Ïª§Ïä§ÌÖÄ Î†àÏù¥ÏïÑÏõÉ Ïù∏ÌîåÎ†àÏù¥Ìä∏
        LayoutInflater inflater = LayoutInflater.from(context);
        View dialogView = inflater.inflate(R.layout.inputgptcode, null);
        builder.setView(dialogView);

        // Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÏÉùÏÑ±
        AlertDialog dialog = builder.create();

        // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Î∞∞Í≤ΩÏùÑ Ìà¨Î™ÖÌïòÍ≤å ÏÑ§Ï†ï
        if (dialog.getWindow() != null) {
            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(android.graphics.Color.TRANSPARENT));
        }

        // Î∑∞ Ï∞∏Ï°∞

        EditText inputCode = dialogView.findViewById(R.id.input_code);
        Button buttonSubmit = dialogView.findViewById(R.id.gptbutton_input);
        Button buttonCancel = dialogView.findViewById(R.id.gptbutton_cancel);
        TextView hompage = dialogView.findViewById(R.id.homepage);

        // Î≤ÑÌäº ÌÅ¥Î¶≠ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
        buttonSubmit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String gptCode = inputCode.getText().toString().trim();
                if (gptCode.isEmpty()) {
                    Toast.makeText(context, "ÏΩîÎìúÍ∞Ä ÏûÖÎ†•ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§", Toast.LENGTH_SHORT).show();
                    return;
                }
                validateAndSaveKey(dialog.getContext(), uid, gptCode);

            }
        });

        buttonCancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog.dismiss();
            }
        });
        hompage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String url = "https://velog.io/@yule/OpenAI-API-%EB%B0%9C%EA%B8%89"; // Ïù¥ÎèôÌï† URL
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(Uri.parse(url));
                context.startActivity(intent);
            }
        });


        // Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
        dialog.show();
    }

    private void validateAndSaveKey(Context context, String uid, String apiKey) {
        String lambdaUrl = "https://l3k3tdlonf.execute-api.us-east-2.amazonaws.com/default/save_api_key_lambda";

        ;

        JSONObject requestBody = new JSONObject();

        try {
            // ÏöîÏ≤≠ Î∞îÎîîÏóê UIDÏôÄ API ÌÇ§ Ìè¨Ìï®
            requestBody.put("uid", uid);
            requestBody.put("apiKey", apiKey);
        } catch (JSONException e) {
            e.printStackTrace();
            Toast.makeText(context, "ÏöîÏ≤≠ ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
            return;
        }

        // Lambda ÏöîÏ≤≠
        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(
                Request.Method.POST,
                lambdaUrl,
                requestBody,
                response -> {
                    try {
                        // Lambda ÏùëÎãµ Ï≤òÎ¶¨
                        int statusCode = response.optInt("statusCode", 200);
                        String message = response.getString("message");

                        if (statusCode == 200) {
                            // ÏÑ±Í≥µ Ï≤òÎ¶¨
                            FirebaseFirestore db = FirebaseFirestore.getInstance();
                            db.collection("users").document(uid)
                                            .update("hasGPTKey",true)
                                    .addOnSuccessListener(aVoid -> {
                                        Toast.makeText(context, "API ÌÇ§Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
                                        groupCheck();  // Îã§Ïùå Îã®Í≥ÑÎ°ú Ïù¥Îèô
                                    })
                                    .addOnFailureListener(e ->{
                                        Toast.makeText(context, "Ï†ÄÏû•Ïóê Î¨∏Ï†úÍ∞Ä ÏÉùÍ≤ºÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
                                    });

                        } else if (statusCode == 400) {
                            // Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ API ÌÇ§ Ï≤òÎ¶¨
                            Toast.makeText(context, "Ïò¨Î∞îÎ•∏ ÌÇ§Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî: " + message, Toast.LENGTH_SHORT).show();
                        } else {
                            // Í∏∞ÌÉÄ Ïò§Î•ò Ï≤òÎ¶¨
                            Toast.makeText(context, "Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: " + message, Toast.LENGTH_SHORT).show();
                        }
                    } catch (JSONException e) {
                        e.printStackTrace();
                        Toast.makeText(context, "ÏùëÎãµ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
                    }
                },
                error -> {
                    // ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò Ï≤òÎ¶¨
                    Log.e("LambdaError", "Lambda Ìò∏Ï∂ú Ïã§Ìå®: " + error.getMessage());
                    if (error.networkResponse != null) {
                        String responseBody = new String(error.networkResponse.data);
                        Log.e("LambdaError", "Response Body: " + responseBody);
                    }
                    Toast.makeText(context, "Lambda Ìò∏Ï∂ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show();
                }
        ) {
            @Override
            public Map<String, String> getHeaders() {
                Map<String, String> headers = new HashMap<>();
                headers.put("Content-Type", "application/json");
                return headers;
            }
        };

        // ÏöîÏ≤≠ Ï∂îÍ∞Ä
        Volley.newRequestQueue(context).add(jsonObjectRequest);
    }
}